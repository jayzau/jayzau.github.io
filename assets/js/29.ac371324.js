(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{380:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"数据结构-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-树"}},[t._v("#")]),t._v(" 数据结构:树")]),t._v(" "),a("h2",{attrs:{id:"什么是树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是树"}},[t._v("#")]),t._v(" 什么是树")]),t._v(" "),a("blockquote",[a("p",[t._v("树是一种数据结构，它是由n(n>=1)个有限结点组成一个具有层次关系的集合。")])]),t._v(" "),a("p",[t._v("图例：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/notes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg",alt:"Linux目录结构"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/notes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/%E4%BA%BA%E7%B1%BB%E6%97%8F%E8%B0%B1.jpg",alt:"人类族谱"}})]),t._v(" "),a("blockquote",[a("p",[t._v("分层次组织在管理上具有更高的效率。")])]),t._v(" "),a("h2",{attrs:{id:"如何实现有效率的查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现有效率的查找"}},[t._v("#")]),t._v(" 如何实现有效率的查找？")]),t._v(" "),a("p",[a("strong",[t._v("查找："),a("strong",[t._v("根据某个给定")]),t._v("关键字K")]),t._v("，从"),a("strong",[t._v("集合R")]),t._v("中找出与"),a("strong",[t._v("K")]),t._v("相同的记录。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("静态查找："),a("strong",[t._v("集合中")]),t._v("记录是固定")]),t._v("的。")]),t._v(" "),a("ul",[a("li",[t._v("没有插入和删除的操作，只有查找。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("动态查找："),a("strong",[t._v("集合中")]),t._v("记录是动态变化")]),t._v("的。")]),t._v(" "),a("ul",[a("li",[t._v("除了查找，还可能发生插入和删除。")])])])]),t._v(" "),a("h3",{attrs:{id:"引子-顺序查找和二分查找。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引子-顺序查找和二分查找。"}},[t._v("#")]),t._v(" 引子：顺序查找和二分查找。")]),t._v(" "),a("ul",[a("li",[t._v("顺序查找：略。时间复杂度为 O(n)")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://baike.baidu.com/item/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE",target:"_blank",rel:"noopener noreferrer"}},[t._v("二分查找"),a("OutboundLink")],1),t._v("：时间复杂度为 O(logN)")])]),t._v(" "),a("p",[t._v("假设待查找的元素队列为：[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]")]),t._v(" "),a("p",[t._v("二分查找的顺序为：[6, 3, 1, 2] / [6, 3, 4, 5] / [6, 9, 7, 8] / [6, 9, 10, 11]")]),t._v(" "),a("p",[t._v("以上4种查找方案能查找出所有元素，最大查找次数为4次。用树的形式来展示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/notes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E6%A0%91.jpg",alt:"二分查找判定树"}})]),t._v(" "),a("h2",{attrs:{id:"树的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的表示"}},[t._v("#")]),t._v(" 树的表示")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/notes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/%E6%A0%91%E7%9A%84%E8%A1%A8%E7%A4%BA.jpg",alt:"树的表示"}})]),t._v(" "),a("h3",{attrs:{id:"树的一些基本术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的一些基本术语"}},[t._v("#")]),t._v(" 树的一些基本术语")]),t._v(" "),a("ol",[a("li",[t._v("结点的度（Degree）：结点的"),a("strong",[t._v("子树个数")])]),t._v(" "),a("li",[t._v("树的度：树的所有结点中最大的度数")]),t._v(" "),a("li",[t._v("叶结点（Leaf）："),a("strong",[t._v("度为0")]),t._v("的结点")]),t._v(" "),a("li",[t._v("父节点（Parent）：有子树的结点就是其子树的父节点。例如：A是B的父节点（树1）。")]),t._v(" "),a("li",[t._v("子节点（Child）：例如：B是A的子节点（树1）。")]),t._v(" "),a("li",[t._v("兄弟结点（Sibling）：具有同一父节点的节点彼此是兄弟结点。例如：B的兄弟结点是C和D。")]),t._v(" "),a("li",[t._v("路径和路径长度：例如：A->K的路径，路径长度为3。")]),t._v(" "),a("li",[t._v("祖先结点（Ancestor）：沿"),a("strong",[t._v("树根到某节点路径上的所有结点")]),t._v("都是该结点的祖先结点。")]),t._v(" "),a("li",[t._v("子孙结点（Descendant）：某结点的"),a("strong",[t._v("子树中所有结点")]),t._v("都是该结点的子孙结点。")]),t._v(" "),a("li",[t._v("结点的层次（Level）：规定"),a("strong",[t._v("根节点在1层")]),t._v("，其他任意一结点的层数是其父节点的层数加1。")]),t._v(" "),a("li",[t._v("树的深度（Depth）：树中所有结点中的"),a("strong",[t._v("最大层次")]),t._v("就是这棵树的深度。")])]),t._v(" "),a("h3",{attrs:{id:"儿子-兄弟表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#儿子-兄弟表示法"}},[t._v("#")]),t._v(" 儿子-兄弟表示法")]),t._v(" "),a("p",[t._v("由上图树2可以看出，每个结点的形式并不相同。结点的子节点数有0至3个不等，这对程序访问并不友好。如果将所有结点的子节点树统一为3（树的所有节点中最大的子节点树）个，则会造成空间浪费。儿子-兄弟表示法可以完美的解决这个问题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/notes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/%E5%84%BF%E5%AD%90-%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg",alt:"儿子-兄弟表示法"}})]),t._v(" "),a("p",[t._v("如上图，处理后旋转一下角度不难看出形成了一颗"),a("strong",[t._v("二叉树")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"二叉树的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的定义"}},[t._v("#")]),t._v(" 二叉树的定义")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("二叉树（T）："),a("strong",[t._v("一个有穷的结点集合。这个集合")]),t._v("可以为空")]),t._v("，若不为空，则它是由"),a("strong",[t._v("根结点")]),t._v("和称为其**左子树T"),a("sub",[t._v("L")]),a("strong",[t._v("和")]),t._v("右子树T"),a("sub",[t._v("R")]),t._v("**的两个不相交的二叉树组成。")])]),t._v(" "),a("ul",[a("li",[t._v("二叉树具有五种基本形态：\n"),a("ul",[a("li",[t._v("Φ")]),t._v(" "),a("li",[t._v("T")]),t._v(" "),a("li",[t._v("T, T"),a("sub",[t._v("L")])]),t._v(" "),a("li",[t._v("T, T"),a("sub",[t._v("R")])]),t._v(" "),a("li",[t._v("T, T"),a("sub",[t._v("L")]),t._v(", T"),a("sub",[t._v("R")])])])]),t._v(" "),a("li",[t._v("二叉树的"),a("strong",[t._v("子树有左右顺序之分")]),t._v("(T"),a("sub",[t._v("L")]),t._v("/T"),a("sub",[t._v("R")]),t._v(")")])]),t._v(" "),a("h3",{attrs:{id:"特殊二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊二叉树"}},[t._v("#")]),t._v(" 特殊二叉树")]),t._v(" "),a("ul",[a("li",[t._v("斜二叉树(Skewed Binary Tree)[skjuːd ˈbaɪnəri triː]：一边歪的二叉树。/  \\")]),t._v(" "),a("li",[t._v("满二叉树(Full Binary Tree)：一棵深度为"),a("strong",[t._v("k")]),t._v("且有"),a("strong",[t._v("2"),a("sup",[t._v("k")]),t._v("-1")]),t._v("个结点的二叉树称为满二叉树。")]),t._v(" "),a("li",[t._v("完美二叉树(Perfect Binary Tree)：同满二叉树。")]),t._v(" "),a("li",[t._v("完全二叉树(Complete Binary Tree)：有"),a("strong",[t._v("n")]),t._v("个节点的二叉树，对树中的节点按从上到下、从左到右的顺序进行编号，编号为"),a("strong",[t._v("i(1<=i<=n)"),a("strong",[t._v("的结点与满二叉树中编号为")]),t._v("i")]),t._v("的结点在二叉树中位置相同。\n"),a("ul",[a("li",[t._v("满二叉树由下到上、由右到左依次删除结点，每次删除结点后的二叉树就可以叫做完全二叉树。")])])])]),t._v(" "),a("h3",{attrs:{id:"二叉树几个重要性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树几个重要性质"}},[t._v("#")]),t._v(" 二叉树几个重要性质")]),t._v(" "),a("ul",[a("li",[t._v("一个二叉树第"),a("strong",[t._v("i")]),t._v("层的最大结点数为："),a("strong",[t._v("2"),a("sup",[t._v("i-1")]),t._v(", i>=1")]),t._v("。")]),t._v(" "),a("li",[t._v("深度为"),a("strong",[t._v("k")]),t._v("的二叉树有最大结点总数为："),a("strong",[t._v("2"),a("sup",[t._v("k-1")]),t._v(", k>=1")]),t._v("。")]),t._v(" "),a("li",[t._v("对任何非空二叉树"),a("strong",[t._v("T")]),t._v("，若**n"),a("sub",[t._v("0")]),t._v("**表示叶节点的个数、"),a("strong",[t._v("n"),a("sub",[t._v("2")]),a("strong",[t._v("是度为")]),t._v("2")]),t._v("的非叶结点个数，那么两者满足关系 "),a("strong",[t._v("n"),a("sub",[t._v("0")]),t._v(" = n"),a("sub",[t._v("2")]),t._v(" + 1")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"【code】二叉树的抽象数据类型定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【code】二叉树的抽象数据类型定义"}},[t._v("#")]),t._v(" 【code】二叉树的抽象数据类型定义")]),t._v(" "),a("ul",[a("li",[t._v("类型名称："),a("strong",[t._v("二叉树")])]),t._v(" "),a("li",[t._v("数据对象集：一个有穷的结点集合。若不为空，则由"),a("strong",[t._v("根结点和其左右二叉子树")]),t._v("组成。")]),t._v(" "),a("li",[t._v("操作集："),a("strong",[t._v("BT∈BinTree")]),t._v(", "),a("strong",[t._v("Item∈ElementType")]),t._v("，重要操作有：\n"),a("ul",[a("li",[a("code",[t._v("def IsEmpty(BT: BinTree) -> bool:")]),t._v("：判别BT是否为空；")]),t._v(" "),a("li",[a("code",[t._v("def Traversal(BT: BinTree):")]),t._v("：遍历，按某顺序访问每个结点；")]),t._v(" "),a("li",[a("code",[t._v("def CreatBinTree() -> BinTree:")]),t._v("：创建一个二叉树。")])])])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("常用遍历方法：")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("def PreOrderTraversal(BT: BinTree):")]),t._v("：先序 => 根、左子树、右子树；")]),t._v(" "),a("li",[a("code",[t._v("def InOrderTraversal(BT: BinTree):")]),t._v("：中序 => 左子树、根、右子树；")]),t._v(" "),a("li",[a("code",[t._v("def PostOrderTraversal(BT: BinTree):")]),t._v("：后序 => 左子树、右子树、根；")]),t._v(" "),a("li",[a("code",[t._v("def LevelOrderTraversal(BT: BinTree):")]),t._v("：层次遍历 => 从上到下、从左到右；")])]),t._v(" "),a("h2",{attrs:{id:"二叉树的储存结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的储存结构"}},[t._v("#")]),t._v(" 二叉树的储存结构")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("顺序储存结构")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("完全二叉树："),a("strong",[t._v("按从上至下、从左到右顺序储存")]),t._v("n")]),t._v("个节点的完全二叉树的"),a("strong",[t._v("结点父子关系")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/notes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E9%A1%BA%E5%BA%8F%E5%82%A8%E5%AD%98.jpg",alt:"完全二叉树顺序储存"}})])]),t._v(" "),a("li",[a("p",[t._v("**一般二叉树：**一般二叉树也可以采用上方结构，但会造成空间浪费。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/notes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/%E4%B8%80%E8%88%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E9%A1%BA%E5%BA%8F%E5%82%A8%E5%AD%98.jpg",alt:"一般二叉树顺序储存"}})])])])]),t._v(" "),a("li",[a("p",[t._v("链表存储")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    \n    Data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n    Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree\n    Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Bintree\n")])])]),a("p",[a("img",{attrs:{src:"/images/notes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/%E9%93%BE%E8%A1%A8%E5%82%A8%E5%AD%98.jpg",alt:"链表储存"}})])])]),t._v(" "),a("h2",{attrs:{id:"【code】二叉树的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【code】二叉树的遍历"}},[t._v("#")]),t._v(" 【code】二叉树的遍历")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("先序遍历")])]),t._v(" "),a("p",[t._v("遍历过程：")]),t._v(" "),a("ol",[a("li",[t._v("访问"),a("strong",[t._v("根结点")])]),t._v(" "),a("li",[a("strong",[t._v("先序")]),t._v("遍历其"),a("strong",[t._v("左子树")])]),t._v(" "),a("li",[a("strong",[t._v("先序")]),t._v("遍历其"),a("strong",[t._v("右子树")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderTravelsal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出当前值")]),t._v("\n        PreOrderTraversal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问左结点")]),t._v("\n        PreOrderTraversal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问右结点")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("中序遍历")])]),t._v(" "),a("p",[t._v("遍历过程：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("中序")]),t._v("遍历其"),a("strong",[t._v("左子树")])]),t._v(" "),a("li",[t._v("访问根结点")]),t._v(" "),a("li",[a("strong",[t._v("中序")]),t._v("遍历其"),a("strong",[t._v("右子树")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InOrderTravelsal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        PreOrderTraversal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问左结点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出当前值")]),t._v("\n        PreOrderTraversal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问右结点")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("后序遍历")])]),t._v(" "),a("p",[t._v("遍历过程：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("后序")]),t._v("遍历其"),a("strong",[t._v("左子树")])]),t._v(" "),a("li",[a("strong",[t._v("后序")]),t._v("遍历其"),a("strong",[t._v("右子树")])]),t._v(" "),a("li",[t._v("访问"),a("strong",[t._v("根结点")])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PostOrderTravelsal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        PreOrderTraversal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问左结点")]),t._v("\n        PreOrderTraversal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问右结点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出当前值")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("先序、中序和后序遍历过程中经过结点的"),a("strong",[t._v("路线一样")]),t._v("（绕着树从左往右画了一圈轮廓），只是"),a("strong",[t._v("访问各节点的时机不同")]),t._v("。")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[a("strong",[t._v("非递归遍历（先序、中序、后序）")])]),t._v(" "),a("p",[t._v("利用堆栈，后进后出来实现。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderTravelsal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\tstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CreatStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" BT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问后压栈")]),t._v("\n            Push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right\n\n        \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InOrderTraversal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CreatStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" BT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只要有左节点，就压栈")]),t._v("\n            Push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 栈不为空，弹出栈顶结点")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问结点")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 转向右子树")]),t._v("\n            \n            \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PostOrderTraversal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CreatStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    stack2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CreatStack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" BT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...")]),t._v("\n            Push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            Push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BT2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("层序遍历")])]),t._v(" "),a("p",[t._v("二叉树遍历的核心问题："),a("strong",[t._v("二维结构的线性化")])]),t._v(" "),a("p",[a("strong",[t._v("队列实现")]),t._v("：遍历从根结点开始，首先将"),a("strong",[t._v("根结点")]),t._v("入队，然后执行循环：结点出队、访问该结点、其左右儿子入队。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LevelOrderTraversal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\tQ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CreatQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MaxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根结点先入队")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" IsEmptyQ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            BT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DeleteQ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 队列中取出元素")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                AddQ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左孩子入队")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                AddQ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 右孩子入队")]),t._v("\n")])])])])]),t._v(" "),a("p",[a("strong",[t._v("【例】求二叉树的高度")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PostOrderGetHeight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        HL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PostOrderGetHeight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        HR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PostOrderGetHeight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        MaxH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HL "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" HL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HR "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" HR\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" MaxH\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("p",[a("strong",[t._v("【例】由两种遍历序列确定二叉树")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 必须要有中序遍历和其余任意一种遍历才能确定一颗二叉树")]),t._v("\n")])])]),a("h2",{attrs:{id:"二叉搜索树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[t._v("#")]),t._v(" 二叉搜索树")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("二叉搜索树(BST, Binary Search Tree)")]),t._v("，也称"),a("strong",[t._v("二叉排序树或二叉查找树")]),t._v("。")]),t._v(" "),a("p",[t._v("可以为空，如果不为空，满足以下性质：")]),t._v(" "),a("ul",[a("li",[t._v("非空"),a("strong",[t._v("左子树")]),t._v("的所有"),a("strong",[t._v("键值小于其根结点")]),t._v("的键值。")]),t._v(" "),a("li",[t._v("非空"),a("strong",[t._v("右子树")]),t._v("的所有"),a("strong",[t._v("键值大于其根结点")]),t._v("的键值。")]),t._v(" "),a("li",[a("strong",[t._v("左、右子树都是二叉搜索树。")])])]),t._v(" "),a("p",[a("strong",[t._v("对二叉搜索树（查找树）进行中序遍历可得到从小到大的序列。")])])]),t._v(" "),a("h3",{attrs:{id:"【code】二叉搜索树操作的特别函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【code】二叉搜索树操作的特别函数"}},[t._v("#")]),t._v(" 【code】二叉搜索树操作的特别函数")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("def Find(X, BST: BinTree) -> Position:")]),t._v("：从二叉搜索树BST中查找元素X，返回其所在的结点的地址。")]),t._v(" "),a("li",[a("code",[t._v("def FindMin(BST: BinTree) -> Position:")]),t._v("：从二叉搜索树BST中查找并返回最小元素所在结点的地址。")]),t._v(" "),a("li",[a("code",[t._v("def FindMax(BST: BinTree) -> Position:")]),t._v("：从二叉搜索树BST中查找并返回最大元素所在节点的地址。")]),t._v(" "),a("li",[a("code",[t._v("def Insert(X, BST: BinTree) -> BinTree:")]),t._v("：插入元素X到二叉搜索树BST。")]),t._v(" "),a("li",[a("code",[t._v("def Delete(X, BST: BinTree) -> BinTree:")]),t._v("：从二叉搜索树BST删除元素X。")])]),t._v(" "),a("p",[a("strong",[t._v("二叉搜索树的查找：")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 空树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 大于当前结点，在右子树中查找")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 小于当前结点，在左子树中查找")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" BST\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IterFind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 迭代效率高于递归")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            BST "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            BST "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" BST\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindMin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最小元素一定在最左分支的端点上")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" FindMin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n    FindMax: 最大元素一定在最右分支的端点上\n    """')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" BST\n")])])]),a("p",[a("strong",[t._v("二叉搜索树的插入与删除")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 没有结点，就自己做结点生成一棵树")]),t._v("\n        BST "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" X\n        BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n        BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Insert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 大于结点，往右子树插入")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Insert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 小于结点，往左子树插入")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" BST\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BinTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在右子树中删除")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在左子树中删除")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左右子树都有，取左子树最大结点或者右子树最小结点来替代自身")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""     删除 41\n                30             30            30\n               /  \\           /  \\          /  \\ \n              15  41         15  35        15  35\n                 /  \\           /  \\          /  \\ \n                33  50   =>    33  50  =>    33  50\n                  \\              \\            \\ \n                  35             35           34\n                 /              /\n                34             34\n            """')]),t._v("\n            MaxBst "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" FindMax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MinBst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data\n            BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Delete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只有左子树就用左子树替代自身")]),t._v("\n            BST "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只有右子树就用右子树替代自身")]),t._v("\n            BST "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 被删除的结点没有子结点")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直接删除当前结点")]),t._v("\n            BST "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" BST\n")])])]),a("h2",{attrs:{id:"平衡二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树"}},[t._v("#")]),t._v(" 平衡二叉树")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("平衡因子(Balance Factor, 简称BF)")]),t._v("：BF(T) = h"),a("sub",[t._v("L")]),t._v(" - h"),a("sub",[t._v("R")]),t._v("，其中h"),a("sub",[t._v("L")]),t._v("和h"),a("sub",[t._v("R")]),t._v("分别为T的左右子树高度。")]),t._v(" "),a("p",[a("strong",[t._v("平衡二叉树(Balanced Binary Tree)(AVL树)")]),t._v("：空树，或者任一结点左右子树的高度差的绝对值不超过1，即 |BF(T)| <= 1。")])]),t._v(" "),a("h3",{attrs:{id:"平衡二叉树的调整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树的调整"}},[t._v("#")]),t._v(" 平衡二叉树的调整")]),t._v(" "),a("ul",[a("li",[t._v("LL旋转、LR旋转、RR旋转、RL旋转。")])]),t._v(" "),a("h2",{attrs:{id:"堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),a("blockquote",[a("p",[t._v("堆(Heap)是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质：")]),t._v(" "),a("ul",[a("li",[t._v("堆中某个节点的值总是不大于或不小于其父节点的值；")]),t._v(" "),a("li",[t._v("堆总是一棵完全二叉树。")])]),t._v(" "),a("p",[t._v("将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。")])]),t._v(" "),a("h3",{attrs:{id:"【例】优先队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【例】优先队列"}},[t._v("#")]),t._v(" 【例】优先队列")]),t._v(" "),a("p",[t._v("特殊的“队列”，取出元素的顺序是依照元素的优先权（关键字）大小，而不是元素进入队列的先后顺序。")]),t._v(" "),a("h3",{attrs:{id:"【code】堆的抽象数据类型描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【code】堆的抽象数据类型描述"}},[t._v("#")]),t._v(" 【code】堆的抽象数据类型描述")]),t._v(" "),a("p",[a("strong",[t._v("最大堆：")]),t._v(" "),a("strong",[t._v("完全二叉树")]),t._v("，每个结点的元素值"),a("strong",[t._v("不小于")]),t._v("其子结点的元素值。最大堆H∈MaxHeap，元素Item∈ElementType，主要操作有：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("def Create(MaxSize: int) -> MaxHeap:")]),t._v("：创建一个空的最大堆。")]),t._v(" "),a("li",[a("code",[t._v("def IsFull(H: MaxHeap) -> bool:")]),t._v("：判断最大堆H是否已满。")]),t._v(" "),a("li",[a("code",[t._v("def Insert(H: MaxHeap, item):")]),t._v("：将元素item插入最大堆H。")]),t._v(" "),a("li",[a("code",[t._v("def IsEmpty(H: MaxHeap) -> bool:")]),t._v("：判断最大堆H是否为空。")]),t._v(" "),a("li",[a("code",[t._v("def DeleteMax(H: MaxHeap):")]),t._v("：返回H中最大的元素（高优先级）。")])]),t._v(" "),a("p",[a("strong",[t._v("最大堆的创建、插入、删除：")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HeapStruct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("iter")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 储存堆元素的数组")]),t._v("\n    Size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 堆的当前元素个数")]),t._v("\n    Capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 堆的最大容量")]),t._v("\n        \n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxHeap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HeapStruct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n        \n        \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MaxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MaxHeap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MaxHeap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MaxSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MaxSize\n    H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MaxData\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 哨兵 \t float('inf')\t")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最小堆->MinData \t\t\t\t\t\t    float('-inf')")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" H\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MaxHeap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n    将新增结点插入到从其父结点到根结点的有序序列中\n    :param H: 最大堆\n    :param item: 待插入的元素\n    :return: \n    """')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" IsFull"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最大堆已满"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n    H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# i指向插入后堆中最后一个元素的位置")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 父节点小于当前元素，一定要有哨兵终止循环！")]),t._v("\n        H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向下取整")]),t._v("\n    H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item\n    \n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DeleteMax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MaxHeap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n    取出根结点（最大值）元素，同时删除堆的一个结点\n    :param H: 最大堆\n    :return: 最大元素\n    """')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最大堆已空"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n    MaxItem "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最大值为根结点")]),t._v("\n    temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# temp为最后一个元素")]),t._v("\n    H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 元素少1")]),t._v("\n    Parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" Parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        Child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左子元素下标")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" Child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            Child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左右子结点取最大")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 子元素填充到当前元素")]),t._v("\n            H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        Parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Child\n    H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" MaxItem\n")])])]),a("p",[a("strong",[t._v("最大堆的建立："),a("strong",[t._v("将")]),t._v("已经存在的N个元素")]),t._v("按最大堆的要求存放在一个一维数组中。")]),t._v(" "),a("ul",[a("li",[t._v("方法1：通过插入操作，将N个元素"),a("strong",[t._v("一个个相继插入到一个初始为空的堆中去")]),t._v("，其时间代价最大为"),a("strong",[t._v("O(N logN)")]),t._v("。")]),t._v(" "),a("li",[t._v("方法2：在"),a("strong",[t._v("线性时间复杂度")]),t._v("下建立最大堆。"),a("strong",[t._v("O(N)")]),t._v(" "),a("ol",[a("li",[t._v("将N的元素按输入顺序存入，先满足"),a("strong",[t._v("完全二叉树的结构特性")]),t._v("。")]),t._v(" "),a("li",[t._v("调整各节点位置，以满足最大堆的"),a("strong",[t._v("有序特性")]),t._v("。")])])])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 方法1 略")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 方法2 插入过程略，重点在于调整结点位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SortMaxHeap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" HeapStruct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    Parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最后一个有子结点的结点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" Parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        Root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Parent\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" Root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            Node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" Node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Size "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                Node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比较左右分支")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 父节点小于子结点，换位")]),t._v("\n                H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Elements"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 父节点大于所有子结点，跳出")]),t._v("\n            Root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Node\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 继续往孙结点排查")]),t._v("\n        Parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直到根结点调整完成")]),t._v("\n")])])]),a("p",[t._v("测试结果：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Size(元素个数)")]),t._v(" "),a("th",[t._v("方法1耗时(s)")]),t._v(" "),a("th",[t._v("方法2耗时(s)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("100,000")]),t._v(" "),a("td",[t._v("0.09956479072570801")]),t._v(" "),a("td",[t._v("0.04955148696899414")])]),t._v(" "),a("tr",[a("td",[t._v("1,000,000")]),t._v(" "),a("td",[t._v("1.1037354469299316")]),t._v(" "),a("td",[t._v("0.6593151092529297")])]),t._v(" "),a("tr",[a("td",[t._v("10,000,000")]),t._v(" "),a("td",[t._v("11.347627401351929")]),t._v(" "),a("td",[t._v("7.2457115650177")])])])]),t._v(" "),a("h2",{attrs:{id:"【视频课程】哈夫曼树-集合及运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【视频课程】哈夫曼树-集合及运算"}},[t._v("#")]),t._v(" 【视频课程】哈夫曼树/集合及运算")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.icourse163.org/course/ZJU-93001",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据结构(浙江大学)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"【待补充】红黑树-b树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【待补充】红黑树-b树"}},[t._v("#")]),t._v(" 【待补充】红黑树/B树...")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("2021-02-01:快两个月没看相关的知识，今天碰到相关的题型发现全忘完了。。。")])])}),[],!1,null,null,null);s.default=e.exports}}]);